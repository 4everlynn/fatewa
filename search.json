[{"categories":["work"],"content":"导读目录\n   账号体系\n  项目管理\n Issue 里程碑    通知与消息\n 邮件通知 站内通知    权限体系\n 仓库隔离 用户权限类型  Guest Reporter Developer Maintainer Owner      文档管理\n Wiki Markdown UML图 流程图引擎(flow、mermaid)    Devops\n Docker 私有仓库 CI / CD Gitlab Runner    基于Git的分支开发模型 (仅介绍两种)\n Production / Develop Feature / Release    进阶阅读\n Gitlab Hooks Gitlab GraphQL GitLab Pages 从 SVN 迁移 Git 的基本使用    ","description":"","tags":["Git","Gitlab","Work"],"title":"Fatewa | 4everlynn","uri":"/fatewa/posts/work/gitlab/"},{"categories":null,"content":"The director of fatewa  4everlynn is alias for Edward Jobs, Since 2012, I have been involved in programming, from RGSS to Java, JavaScript, PHP and Golang  Led the fatewa team and participated in many projects, including but not limited to  Unilever’s H5 Page Sina’s teachers' grand ceremony Page Construction of official websites of several companies Open-Source Software  ","description":"","tags":null,"title":"Fatewa | 4everlynn","uri":"/fatewa/about/"},{"categories":["web"],"content":" 在过去的一段时间里，我在项目中参与了一部分 WebGL 的功能实现，主要使用到的技术为 Cesium、ThreeJS， 闲暇之余，就打算记录一下这两个框架的使用，以及与 Vue 封装结合的过程。\n 代码仓库地址, 喜欢记得给个Star呀~\nWhy Three.js 随着 WebGL 逐渐普及，顺应而生的框架也越来越多，在这其中TheeJS在一定程度上来说是知名度、完成度最高的框架，\n也正是其优点之多使得我们在做技术选型的时候，坚定地选择了它，话虽如此，使用过程中，还是遇到了不少棘手的问题，\n在此我便记录、复盘一下整个封装、使用的过程，以便自己将来进行查阅，也为后来者提供一些案例。\nVersion \u0026 Tech  Vue ^2.6.11 three ^0.128.0 Typescript ~4.1.5 rxjs ^6.6.7 vue-styled-components ^1.6.0  Project Struct . ├── App.vue ├── components │ └── base │ ├── fatewa-gl │ │ └── index.tsx # 入口组件 │ └── types │ └── index.ts # 接口、类型定义 ├── libs │ ├── lib-plugins # 各种默认实现的插件 │ └── lib-utils.ts # 工具算法 ├── main.ts ├── router │ └── index.ts ├── shims-tsx.d.ts ├── shims-vue.d.ts ├── textures # 三维纹理 └── views Types 经过设计，框架整体采用插件化编程方式, 将功能解耦，增强代码的可读性的同时也带来了更强的维护性。\n其中 pass 函数从 lib-utils 引入\n仅仅只是一个工具方法，用于排除 eslint 的错误\npass 函数 1 2 3 4 5 6 7 8  /** * 局部规避 eslint 声明未引用的变量规则 * @param args */ // eslint-disable-next-line function pass (args: any) { // passed for eslint }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93  import { Camera, Scene, Renderer } from 'three' import { pass } from '@/libs/lib-utils' /** * 插件安装参数 */ interface PluginInstallOptions { /** * 场景 */ scene: Scene, /** * 摄像头 */ camera: Camera, /** * 渲染器 */ renderer: Renderer } /** * 插件的钩子函数 */ interface PluginHooks { beforeInstall (options: PluginInstallOptions): void afterInstall (options: PluginInstallOptions): void /** * 渲染函数，将在整个主循环中进行渲染 * 需要注意的是，逻辑应尽可能地简单，否则会影响到整体渲染的帧数 * @param options */ render (options: PluginInstallOptions): void } /** * 插件接口 */ interface Plugin extends PluginHooks { /** * 所有的插件需要实现安装方法 * @param options */ install (options: PluginInstallOptions): void } /** * 插件适配器，对于不关心钩子函数的插件 * 直接继承抽象类即可 */ abstract class GLPlugin implements Plugin { /** * 钩子函数的默认实现 * @param options */ afterInstall (options: PluginInstallOptions): void { pass(options) } /** * 钩子函数的默认实现 * @param options */ beforeInstall (options: PluginInstallOptions): void { pass(options) } abstract install(options: PluginInstallOptions): void /** * 钩子函数的默认实现 * @param options */ render (options: PluginInstallOptions): void { pass(options) } } /** * 实体类，暂未实现参数 */ interface Entity { none: any } /** * 组件的 Prop 定义 */ interface GL { entities: Entity [], plugins: Plugin [] } export { GL, Entity, Plugin, PluginInstallOptions, GLPlugin }    对于这个结构下的具体实现，将在后续的文章中介绍\n ","description":"","tags":["three.js","vue"],"title":"Fatewa | 4everlynn","uri":"/fatewa/posts/tech/threejs-chapter-1/"},{"categories":["docker"],"content":" 网站 对于每个人都不陌生，我们每天都在与各种不同的网站进行互动，随着信息化不断发展，很多公司与个人都拥有了自己的网站，很多时候做网站的念头都止步于技术限制，那么今天，我就介绍一个让大家可以很快搭建起自己网站的方法，如果这正是您所需的就继续看下去吧！\n WordPress 正如你所见,今天要介绍的就是大名鼎鼎的 WordPress，使用 WordPress ，您仅需要一点点常用的计算机知识即可，如果您对它还不认识，那么以下是 维基百科 对于 WordPress 的一段描述:\n WordPress是一个以PHP和MySQL为平台的自由开源的博客软件和内容管理系统。WordPress具有插件架构和模板系统。 截至2018年4月，排名前1000万的网站中超过30.6%使用WordPress。 WordPress是最受欢迎的网站内容管理系统。 全球有大约30%的网站(7亿5000个)都是使用WordPress架设网站的。 WordPress是目前因特网上最流行的博客系统。 WordPress在最著名的网络发布阶段中脱颖而出。 如今，它被使用在超过7000万个站点上。\n 或许你对于其中的一些专业术语并不了解，没关系！只要知道这是一个很可靠的系统即可。\n如果你想了解更多关于 WordPress 的知识，可以访问 Wordpress 中文官网\n怎么做 ？ 虽然 Wordpress 多以安装简便著称，但作为没有任何相关知识的群体，想要成功安装仍然具有一定难度，按照传统的方式进行安装，搭建PHP的运行环境就是基础，这一步可能就会劝退很大一部分人，那么今天我要介绍的就是使用 Docker 进行安装的方式，通过这种方式，只需要有一台 Linux 的主机即可(需要支持Docker运行)\n关于 Docker 在这篇文章中，不对 Docker 进行过多的介绍，后续的篇章中我会逐步地介绍这个服务容器化时代超级🔥的开源工具，那么至少在这篇文章中，只需要能够安装并简单使用即可\n安装 Docker 在 CentOS 7 安装docker要求系统为64位、系统内核版本为 3.10 以上，可以使用以下命令查看当前机器的版本\n1  uname -r   运行结果参考\n1 2 3  [root@disware ~]# uname -r 3.10.0-693.5.2.el7.x86_64 [root@disware ~]#    安装完成后可通过以下命令进行验证\n1  docker -v   运行结果参考\n1 2  [root@disware ~]# docker -v Docker version 18.09.5, build e8ff056   安装完成，我们接着安装 docker-compose，由于这个在国内安装比较慢，我们可以通过这里提供的加速服务进行安装\n以下是安装 docker-compose 的命令\n1 2  curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` \u003e /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose   安装完成后，同样地，我们可以通过以下命令进行验证\n1  docker-compose -v   运行结果参考\n1 2  [root@disware ~]# docker-compose -v docker-compose version 1.25.4, build 8d51620a   创建服务文件夹 在此处我以 /opt/wordpress 这个文件夹为例\n1  mkdir /opt/wordpress \u0026\u0026 cd /opt/wordpress   编写 .env 文件 这个文件的主要作用是配置一些环境变量，可以简单地理解成类似于某个软件的配置项, 在当前目录下，我们执行\n1  vi .env   接着将以下内容输入到其中\n1 2 3 4 5 6 7 8  # 数据库名称 DB_NAME=my_website # 数据库 用户名 DB_USER=root # 数据库 密码 DB_PASSWORD=root123 # 数据库 HOST名称 HOST_MYSQL=mysql   有了这个文件，我们就可以紧接着进行编写 docker-compose.yml (服务结构的描述文件)\n1  vi docker-compose.yml   输入内容如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  version:'3'services:wordpress:image:wordpresshostname:wordpressports:- \"9812:80\"environment:DB_HOST:${HOST_MYSQL}DB_NAME:${DB_NAME}DB_USER:${DB_USER}DB_PASSWORD:${DB_PASSWORD}volumes:- ./data/wordpress/root:/var/www/html- ./logs/php/:/var/log/php/:rwdepends_on:- mysqlmysql:image:mysql:5.7hostname:${HOST_MYSQL}volumes:- ./data/mysql:/var/lib/mysql- ./my.cnf:/etc/my.cnfrestart:alwaysenvironment:MYSQL_ROOT_PASSWORD:${DB_PASSWORD}  然后，由于我们的网站中会有一些中文字符，所以需要对数据库的字符集进行一个配置, 在当前目录下执行\n1  vi my.cnf   输入内容如下\n[mysqld] user=mysql default-storage-engine=INNODB character-set-server=utf8 [client] default-character-set=utf8 [mysql] default-character-set=utf8 启动服务 如果你顺利了进行以上的全部步骤，恭喜！我们可以启动自己的网站了！\n在当前目录下，输入以下命令，即可以后台的形式启动应用\n1  docker-compose up -d   如果在终端中，你看到了以下输出，那么应用正式启动了\n1 2 3 4  [root@disware wordpress]# docker-compose up -d Creating network \"wordpress_default\" with the default driver Creating wordpress_mysql_1 ... done Creating wordpress_wordpress_1 ... done   在正式安装之前，我们还需要创建一个空的数据库\n1 2 3 4 5 6  docker exec -ti wordpress_mysql_1 mysql -u root -proot123 create database `my_website`; exit    在浏览器中输入 http://localhost(或者 Linux IP):9812 即可看到安装界面\n 选择完语言后，你会看到这样一个表单, 按照以下内容填写即可\n   名称 内容     数据库名 my_website   用户名 root   密码 root123   数据库主机 mysql   表前缀 wp_    到此， Wordpress 就安装完成了，后续填写用户名、密码，登陆即可\n","description":"","tags":["docker","wordpress","docker-compose"],"title":"Fatewa | 4everlynn","uri":"/fatewa/posts/docker/wordpress/"},{"categories":["docker"],"content":"前言 技术圈的发展一直以来都是瞬息万变，从去年开始 5G 技术逐渐落地商用，人工智能也慢慢地成熟，就发展而言这几年的速度可以说是达到了一个非常恐怖的地步，在运维领域，技术也是日新月异，而我们今天要介绍的 docker 就是这些年在生产环境中已经广泛被应用的一门技术。\n以下是百度百科中对于 docker 的一段介绍\n Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux机器或Windows 机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。\n 什么是容器 容器 与 虚拟机 非常接近，却又不是同一个东西，相较于虚拟机沉重的架构，容器可以说是拥有非常苗条的 ‘身材’，它可以在几秒内启动，并能与宿主机直接进行通讯，与虚拟机不同的是，容器所能做到的隔离，通常是进程级别的，在资源上它是与宿主机共享的，严格来说容器并不是真正的虚拟化。作为开发、运维时使用，我们的每一个服务、应用都对应一个容器，作为应用运行时环境，容器内部一般会装载busybox、alpine等非常轻量的操作系统。\n安装 docker (以 CentOS 7 为例) 安装 yum 源 在终端中输入\n1  curl -f sSL https://get.docker.com/ | sh -s -- --mirror AzureChinaCloud   更新 yum 缓存 1  yum makecache fast   安装最新版 docker 1  yum -y install docker-engine   安装完成后，我们可以通过以下命令进行检验\n1  docker -v   docker 支持的命令 （列举常用） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  Commands: build Build an image from a Dockerfile commit Create a new image from a container's changes exec Run a command in a running container images List images logs Fetch the logs of a container ps List containers pull Pull an image or a repository from a registry push Push an image or a repository to a registry restart Restart one or more containers rm Remove one or more containers rmi Remove one or more images run Run a command in a new container start Start one or more stopped containers stop Stop one or more running containers tag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE top Display the running processes of a container version Show the Docker version information   Hello World 按照惯例，我们以 Hello World,作为技术入门的案例, 我们使用 pull 命令，拉取 docker-hub 官方仓库中的 hello-world 镜像\n1  docker pull hello-world   然后 输入\n1  docker run hello-world   此时终端会输出下面这段英文\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/   至此，我们就完成了 docker 最基础的应用\n配置镜像仓库 在实际使用的过程中，我们通常会使用国内镜像进行加速(docker-hub 拉取大镜像非常慢)，所以在此处我们继续进行镜像配置。\n1  vi /etc/docker/daemon.json   输入以下内容\n1 2 3 4 5 6 7 8  { \"registry-mirrors\": [ \"https://1nj0zren.mirror.aliyuncs.com\", \"https://docker.mirrors.ustc.edu.cn\", \"http://f1361db2.m.daocloud.io\", \"https://registry.docker-cn.com\" ] }   接着，我们重启 docker 服务使配置生效\n1  systemctl restart docker   ","description":"","tags":["docker"],"title":"Fatewa | 4everlynn","uri":"/fatewa/posts/docker/docker/"}]
